var exec = require("child_process").exec;var querystring = require("querystring"), fs = require("fs"), formidable = require("formidable");;function start(response) {  console.log("Request handler 'start' was called.");  var body = '<html>'+    '<head>'+    '<meta http-equiv="Content-Type" content="text/html; '+    'charset=UTF-8" />'+    '</head>'+    '<body>'+    '<form action="/upload" enctype="multipart/form-data" '+    'method="post">'+    '<input type="file" name="upload" multiple="multiple">'+    '<input type="submit" value="Upload file" />'+    '</form>'+    '</body>'+    '</html>';    response.writeHead(200, {"Content-Type": "text/html"});    response.write(body);    response.end();  // exec("echo 'hello, world'",  //   { timeout: 10000, maxBuffer: 20000*1024 },  //   function (error, stdout, stderr) {  //     response.writeHead(200, {"Content-Type": "text/plain"});  //     response.write(stdout);  //     response.end();  //   });}function upload(response, request) {  console.log("Request handler 'upload' was called.");  // response.writeHead(200, {"Content-Type": "text/plain"});  // response.write("You've sent the text: "+  // querystring.parse(postData).text);  // response.end();  var form = new formidable.IncomingForm();  console.log('about to parse');  form.parse(request, function(error, fields, files){    console.log("parsing done");    fs.renameSync(files.upload.path, "/tmp/test.png");    response.writeHead(200, {"Content-Type": "text/html"});    response.write("received image:<br/>");    response.write("<img src='/show' />");    response.end();  });}function show(response) {  console.log("Request handler 'show' was called.");  fs.readFile("/Users/warrior/Pictures/ChMkJ1bKxEGIctV2AALgeruRsIkAALHDwOyMzoAAuCS191.jpg", "binary", function(error, file) {    if(error) {      response.writeHead(500, {"Content-Type": "text/plain"});      response.write(error + "\n");      response.end();    } else {      response.writeHead(200, {"Content-Type": "image/png"});      response.write(file, "binary");      response.end();    }  });}exports.start = start;exports.upload = upload;exports.show = show;// 1、时间控制 slider 滑块同步设置  时间控制滑块没有节点；滑块没有按照3种方案区分存放  ----timeControllView// 7、设备管理点击显示无法获取权限，并且快速狂点多次，会疯狂的先后弹出提示，这边要做一个判断：用户点击可以实时变色RGB值代表点击到了，//     但是在首次HUD提示结果出来前，不会再做真判断，应该能解决疯狂弹窗的问题。    ----  deviceListView 